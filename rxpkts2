#!/usr/bin/perl -w

use strict;
use warnings FATAL => 'all';
use Data::Dumper;
use Pod::Usage;
use Getopt::Long;
use Time::HiRes;

my @DEV      = ();
my $debug    = 0;
my $dumper   = 0;
my $help     = 0;
my $man      = 0;
my $all      = 0;
my $count    = 0;
my $delay    = 1;
my $droponly = 0;
my $metrics_str = undef;
my @metrics = ();  # Array per memorizzare le metriche richieste

GetOptions(
    'dev=s'    => \my $dev_str,
    'count=s'  => \$count,
    'sec=s'    => \$delay,
    'all!'     => \$all,
    'drop!'    => \$droponly,
    'metrics=s' => \$metrics_str,
    'debug=s'  => \$debug,
    'dumper!'  => \$dumper,
    'help|?'   => sub { Getopt::Long::HelpMessage(-verbose => 1) },
    'man'      => \$man,
) or pod2usage(2);

pod2usage(-exitstatus => 0, -verbose => 2) if $man;
pod2usage(-exitstatus => 1, -verbose => 1) unless $dev_str;

# Converti la stringa di interfacce in un array
@DEV = split /,/, $dev_str;
@DEV = map { s/^\s+|\s+$//g; $_ } @DEV;

# Converti la stringa di metriche in un array
if (defined $metrics_str) {
    @metrics = split /,/, $metrics_str;
    @metrics = map { s/^\s+|\s+$//g; $_ } @metrics;
}

my %STATS;

sub collect_stats {
    my ($device) = @_;
    my %hash;
    open(ETHTOOL, "sudo /usr/sbin/ethtool -S $device |")
        or die "Failed to run ethtool on device $device: $!";
    $hash{timestamp} = Time::HiRes::time();
    while (defined(my $line = <ETHTOOL>)) {
        chomp($line);
        if ($line =~ m/\s*(.+):\s?(\d+)/) {
            my $key   = $1;
            my $value = $2;
            $hash{$key} = $value;
            print "PARSED: $line -- key:$key val:$value\n" if ($debug > 2);
        } else {
            print "WARN: could not parse line:\"$line\"\n" if ($debug > 1);
        }
    }
    close(ETHTOOL)
        or die "ERR: Ethtool --statistics failed on device:$device $!";
    return \%hash;
}

sub difference {
    my ($device, $current_stats, $prev_stats, $metrics_ref) = @_;
    return 0 if (!defined $prev_stats);

    my @metrics = @$metrics_ref if $metrics_ref;
    my $period = $current_stats->{timestamp} - $prev_stats->{timestamp};
    print "timestamp $current_stats->{timestamp} - $prev_stats->{timestamp} = $period\n" if $debug;
    
    delete $prev_stats->{timestamp};
    
    my @keys = sort keys %$prev_stats;
    my $something_changed = 0;

    foreach my $key (@keys) {
        if (@metrics && !grep { $_ eq $key } @metrics) {
            next;
        }
        if ($droponly && $key ne 'rx_xdp_drop') {
            next;
        }
        
        my $value_now  = $current_stats->{$key};
        my $value_prev = $prev_stats->{$key};
        my $diff = ($value_now - $value_prev) / $period;

        next if (($diff == 0) && !$all);
        
        $diff = sprintf("%.0f", $diff);
        (my $pretty = $diff) =~ s/(\d{1,3}?)(?=(\d{3})+$)/$1,/g;

        printf("Ethtool(%-8s) stat: %12d (%15s) <= %s /sec\n",
               $device, $diff, $pretty, $key);
        $something_changed++;
    }
    return $something_changed;
}

sub stats_loop {
    my $collect = $count + 1;
    my %prev    = ();
    my %stats   = ();

    while (($count == 0) ? 1 : $collect--) {
        print "\nShow adapter(s) (" . join(' ', @DEV) . ") statistics (ONLY that changed!)\n";
        my $changes = 0;
        foreach my $device (@DEV){
            $stats{$device} = collect_stats($device);
            $changes += difference($device,
                                   $stats{$device}, $prev{$device}, \@metrics);
        }
        if (!scalar keys %prev) {
            print " ***NOTE***: Collecting stats for next round ($delay sec)\n";
        } elsif (!$changes) {
            print " ***WARN***: No counters changed\n" ;
        }
        %prev = %stats;
        Time::HiRes::sleep($delay);
    }
}

stats_loop();

