#!/usr/bin/perl -w

=head1 NAME

 ethtool_stats.pl - Sample changing adapter statistics from ethtool -S

=head1 SYNOPSIS

 ethtool_stats.pl --dev DEVICE [options]

 options:
    --dev    Ethernet adapter(s)/device(s) to get stats from.
             (specify --dev more times to sample multiple devices)
    --count  How many seconds sampling will run (default: infinite)
    --sec    Sets sample interval in seconds (default: 1.0 sec)
    --all    List all zero stats
    --drop   Print only the 'rx_drop' field
    --help   Brief usage/help message.
    --man    Full documentation.

=head1 DESCRIPTION

 This script shows ethtool (-S|--statistics) stats, but only stats
 that change.  And then reports stats per second.

 Created this script because some drivers, e.g. mlx5, report false
 stats via ifconfig.

=head1 AUTHOR

 Jesper Dangaard Brouer <netoptimizer@brouer.com>

=cut

use strict;
use warnings FATAL => 'all';
use Data::Dumper;
use Pod::Usage;
use Getopt::Long;
use Time::HiRes;

my @DEV      = ();
my $debug    = 0;
my $dumper   = 0;
my $help     = 0;
my $man      = 0;
my $all      = 0;
my $count    = 0;
my $delay    = 1;
my $droponly = 0;   # <-- new variable for --drop option

GetOptions(
    'dev=s'    => \@DEV,
    'count=s'  => \$count,
    'sec=s'    => \$delay,
    'all!'     => \$all,
    'drop!'    => \$droponly,   # <-- parse --drop
    'debug=s'  => \$debug,
    'dumper!'  => \$dumper,
    'help|?'   => sub { Getopt::Long::HelpMessage(-verbose => 1) },
    'man'      => \$man,
) or pod2usage(2);

pod2usage(-exitstatus => 0, -verbose => 2) if $man;
pod2usage(-exitstatus => 1, -verbose => 1) unless scalar @DEV;

my %STATS;

sub collect_stats($) {
    # Parse ethtool stats and return key=value hash
    my $device = shift;
    my %hash;
    open(ETHTOOL, "sudo /usr/sbin/ethtool -S $device |")
        or die "Failed to run ethtool on device $device: $!";
    $hash{timestamp} = Time::HiRes::time();
    while (defined(my $line = <ETHTOOL>)) {
        chomp($line);
        if ($line =~ m/\s*(.+):\s?(\d+)/) {
            my $key   = $1;
            my $value = $2;
            $hash{$key} = $value;
            print "PARSED: $line -- key:$key val:$value\n" if ($debug > 2);
        } else {
            print "WARN: could not parse line:\"$line\"\n" if ($debug > 1);
        }
    }
    close(ETHTOOL)
        or die "ERR: Ethtool --statistics failed on device:$device $!";
    return \%hash;
}

sub difference($$$) {
    my ($device, $current_stats, $prev_stats) = @_;
    # If we don't have a previous stats sample, return 0 (nothing to print).
    return 0 if (!defined $prev_stats);

    my $period = $current_stats->{timestamp} - $prev_stats->{timestamp};
    print "timestamp $current_stats->{timestamp} - $prev_stats->{timestamp} = $period\n" if $debug;
    if (($period > $delay * 2) || ($period < ($delay / 2))) {
        print " ***WARN***: Sample period ($delay) not accurate ($period)\n";
    }

    # We only need to iterate over actual ethtool stats, so remove timestamps
    delete $prev_stats->{timestamp};

    my @keys = sort keys %$prev_stats;
    my $something_changed = 0;

    foreach my $key (@keys) {
        # If --drop is used, skip everything except 'rx_drop'
        if ($droponly && $key ne 'rx_xdp_drop') {
            next;
        }

        my $value_now  = $current_stats->{$key};
        my $value_prev = $prev_stats->{$key};
        my $diff = ($value_now - $value_prev) / $period;

        # Skip zero diffs unless --all is specified
        next if (($diff == 0) && !$all);

        # Round off the number
        $diff = sprintf("%.0f", $diff);

        # Add thousands comma separators
        (my $pretty = $diff) =~ s/(\d{1,3}?)(?=(\d{3})+$)/$1,/g;

        printf("Ethtool(%-8s) stat: %12d (%15s) <= %s /sec\n",
               $device, $diff, $pretty, $key);
        $something_changed++;
    }
    return $something_changed;
}

sub stats_loop() {
    my $collect = $count + 1; # We do an initial "warm-up" round
    my %prev    = ();
    my %stats   = ();

    while (($count == 0) ? 1 : $collect--) {
        print "\nShow adapter(s) (" . join(' ', @DEV) .
              ") statistics (ONLY that changed!)\n";
        my $changes = 0;
        foreach my $device (@DEV){
            $stats{$device} = collect_stats($device);
            $changes += difference($device,
                                   $stats{$device}, $prev{$device});
        }
        if (!scalar keys %prev) {
            print " ***NOTE***: Collecting stats for next round ($delay sec)\n";
        } elsif (!$changes) {
            print " ***WARN***: No counters changed\n" ;
        }
        %prev = %stats;
        Time::HiRes::sleep($delay);
    }
}

stats_loop();

